---
layout: post
title:  "Sessions and csrf in rails."
author: "Rajat Singla"
date:   2016-08-04 21:41:55 +0530
categories: ruby
comments: true
---
<b>
What is session?
</b>
Session is client's information which can comprise of various things like current logged in user on that particular client, csrf token or any other information. Now this information can be saved at three places naming cache,cookie,database.
<!--more-->
<br>
<b>
Cookie store, cache store, or database store?
</b>
When it works, storing your sessions in cookies is by far the easiest way to go. It doesn’t need any extra infrastructure or setup.
But if you need to move beyond the cookie session store, you have two options:
Store sessions in a database, or store them in cache your.

<br>
<b>
How cookie session store work in rails ?
</b>
When you request a webpage, the server sets a cookie when it responds back.
This cookie contains your session store.
{% highlight ruby %}
session store in config/initializers/session_store.rb:
Rails.application.config.session_store :active_record_store, :key => '_my_app_session'
{% endhighlight %}
By default, in Rails, there isn’t much of a difference. Rails does some work with the cookie to make it more secure. But besides that, it works the way you’d expect. Your Rails app puts some data into the cookie, the same data comes out of the cookie.
And until the cookie expires, every time you make a request, your browser will the send cookies back to the server
server will extract the data out of cookie and with this data(information of client) builds a session which we call rails session.
{% highlight ruby %}
Sessions are easy to use in rails code:
session[:current_user_id] = @user.id
{% endhighlight %}

<br>
<b>
What is csrf?
</b>
Cross site request forgery
lets say you are logged in on facebook.com
and in another tab you have opened a hacker's website. Which is urging you to click a image saying you will get 100 coins. But actually it will send a request to facebook.com deleting all users.
This request will be successfull because browser will send cookie along with the request and in this cookie your current session exists.

<br>
<b>
How to prevent csrf?
</b>
Synchronizer token pattern
Synchronizer token pattern (STP) is a technique where a token, secret and unique value for each request, is embedded by the web application in all HTML forms and verified on the server side. The token may be generated by any method that ensures unpredictability and uniqueness (e.g. using a hash chain of random seed). The attacker is thus unable to place a correct token in their requests to authenticate them.
{% highlight ruby %}
<input type="hidden" name="csrfmiddlewaretoken" value="KbyUmhTLMpYj7CD2di7JKP1P3qmLlkPt" />
{% endhighlight %}
Security of this technique is based on the assumption that only JavaScript running within the same origin will be able to read the cookie's value. JavaScript running from a rogue file or email will not be able to read it and copy into the custom header.
Cookie-to-Header Token
On login, the web application sets a cookie containing a random token that remains the same for the whole user session
{% highlight ruby %}
Set-Cookie: Csrf-token=i8XNjC4b8KVok4uw5RftR38Wgp2BFwql; expires=Thu, 23-Jul-2015 10:25:33 GMT; Max-Age=31449600; Path=/
{% endhighlight %}
JavaScript operating on the client side reads its value and copies it into a custom HTTP header sent with each transactional request
{% highlight ruby %}
X-Csrf-Token: i8XNjC4b8KVok4uw5RftR38Wgp2BFwql
{% endhighlight %}
The server validates presence and integrity of the token
Even though the csrf-token cookie will be automatically sent with the rogue request, the server will be still expecting a valid X-Csrf-Token header.

<br>
<b>
How anti-csrf works in rails?
</b>
On making a new session rails generate a random hash of 32 bit characters, encodes it by base64 encoding and saves it in session[:csrf_token].
And in index.html it embeds a form_authenticity_token in X-csrf-token named meta tag
{% highlight ruby %}
<meta content="#{form_authenticity_token}" name="X-csrf-token">
<meta content="3aLSYWhz1J4psQJLQfGnFYYVyO9MQACD5KdWLls7iSQ=" name="X-csrf-token">
{% endhighlight %}
Which is randomaly generated on every post request using session[:csrf_token]
And on every post request rails compare session[:csrf_token] and token from X-csrf-token named meta tag and validates the request.

<br>
<b>
How to add anti-csrf thing in my app?
</b>
Just add
protect_from_forgery
in your application controller and you are protected from csrf.
yes, it's that simple

<br>
<b>
What if session[:csrf_token] and token from X-csrf-token named meta tag doesn't match?
</b>
It depends on the option you passed with protect_from_forgery
<br>
protect_from_forgery with: :null_session(dafault option)
<br>
Set all values to nil in all cookies, including the session. That means the user won’t be logged in anymore for that action and can’t perform the change
<br>
protect_from_forgery with: :reset_session Rails set a new cookie with empty session in browser.That means the user won’t be logged in anymore.
<br>
protect_from_forgery with: :exception Raises an ActionController::InvalidAuthenticityToken exception.


source:
<a href="http://www.rorsecurity.info/">http://www.rorsecurity.info/</a>
<br>
<a href="http://www.justinweiss.com/articles/how-rails-sessions-work/">http://www.justinweiss.com/articles/how-rails-sessions-work/</a>
<br>
<a href="http://guides.rubyonrails.org/security.html">http://guides.rubyonrails.org/security.html</a>
